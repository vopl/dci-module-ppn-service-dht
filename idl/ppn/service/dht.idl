/* This file is part of the the dci project. Copyright (C) 2013-2021 vopl, shtoba.
   This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public
   License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
   You should have received a copy of the GNU Affero General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. */

require "ppn/node/feature.idl"
require "ppn/node/link/feature.idl"

/*
    на начальной стадии реализация будет крайне примитивной - минимальный насколько только можно функционал

    в дальнейшем, когда появятся проблемы с
        - нагрузкой из за массивного/популярного контента или
        - утерей индекса из за мутабельности состава узлов сети

    предполагается усиление данной примитивной реализации за счет
        - расширение "хранящей ноды" до "хранящего кластера" по салютному принципу
        - партицирование нагрузки по кластеру
        - репликация нагрузки по кластеру, включая учет мутабельности состава узлов в кластере
        - управление уровнем дублирования нагрузки по кластеру для противодействия утере данных в связи с мутабельностью состава узлов
*/

scope ppn::service::dht
{
    /////////0/////////1/////////2/////////3/////////4/////////5/////////6/////////7
    exception Error {}
    exception NotReady : Error {}

    /////////0/////////1/////////2/////////3/////////4/////////5/////////6/////////7
    struct Key
    {
        array<uint8, 32> value;
    }

    scope value
    {
        scope payload
        {
            struct Nonce {bytes value;}
            struct Raw {bytes value;}
            struct ServiceId {iid value;}
            struct FileId {bytes value;}
            struct TargetAddress {transport::Address value;}
            struct TargetId {node::link::Id value;}
            struct TargetSignature {array<uint8, 64> value;}// для сериализованного ключа и всего значения
        }

        alias Data = variant<
            Nonce,
            Raw,
            ServiceId,
            FileId,
            TargetId,
            TargetSignature,
            TargetAddress
        >;
    }

    struct Value
    {
        list<value::Data> data;// размер ограничен 1Кб
    }

    /////////0/////////1/////////2/////////3/////////4/////////5/////////6/////////7
    // процесс поиска, может совершать прогресс, окончиться успехом или неудачей
    interface ProgressListner
    {
        in advance(uint64 distance);
    }

    // интерфейс для пользователя
    interface Processor
    {
        in put(Key, Value, ProgressListner) -> void;
        in get(Key, uint32 limit, ProgressListner) -> set<Value>;
    }

    scope internal
    {
        // участник поискового сообщества
        interface Peer : Processor
        {
        }
    }
}

scope ppn::service
{
    interface Dht
        : node::Feature
        , node::feature::AgentProvider
        , node::link::Feature
        , node::link::feature::Payload
    {}
}
